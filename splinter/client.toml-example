############################### CLIENT N/W CONFIG ##############################

# The PCI address of the NIC the client is going to transmit and receive
# packets on.
nic_pci = "0000:04:00.1"

# The MAC address of the NIC the client is going to transmit and receive
# packets on.
mac_address = "01:02:03:04:05:07"

# The IP address of the client (Not the one reported by ifconfig).
ip_address = "192.168.0.1"

############################### SERVER N/W CONFIG ##############################

# The MAC address of the NIC the server is going to transmit and receive
# packets on.
server_mac_address = "01:02:03:04:05:06"

# The IP address of the server (Not the one reported by ifconfig).
server_ip_address = "192.168.0.2"

# The number of server UDP ports to send requests to.
server_udp_ports = 8

# Server network endpoint receiving install() RPCs.
install_addr = "127.0.0.1:7700"

############################### GENERIC CLIENT CONFIG ##########################

# The workload to setup the client for. Supported workloads: YCSBT.
workload = "YCSBT"

# If true, client generates open loop-load, otherwise the client generates
# closed-loop load.
open_load = false

# If true, client's send invoke() based RPC requests to the server. If false,
# regular get() and put() operations are used.
use_invoke = true

# The number of tenants to generate requests for. The exact tenant id for a
# particular request should be generated from a Zipfian distribution.
num_tenants = 8

# The skew parameter for the Zipfian distribution used to generate tenant id's
# for RPC requests.
tenant_skew = 0.1

# The number of RPC requests that the client must generate.
num_reqs = 64000000

# The rate at which the client must issue RPC requests.
req_rate = 500000

# The length of the key to issue reads and writes for.
key_len = 30

# The length of the value to issue writes for.
value_len = 100

# The number of keys in the table on the server. Required to initialize the
# Zipfian distribution from which the key for each request is sampled.
n_keys = 1000000

# The skew of the Zipfian distribution from which keys are sampled.
skew = 0.99

############################### YCSB CLIENT CONFIG #############################

# The percentage of operations that are puts/writes.
put_pct = 5

# If true, the client will generate 100-put_pct percentage range scans requests and
# put_pct of put() operations.
enable_scan = false

# The number of records the range scan operation will scan, starting from the key
# generated for get() operation using zipf distribution; only when enable_scan=true.
scan_range = 10

############################### AGGREGATE CLIENT CONFIG ########################

# The number of records to aggregate across.
num_aggr = 2

# The order of the final result of the aggregation.
order = 1

############################### TAO CLIENT CONFIG ##############################

# If true, then an invoke() based run will use native requests for an obj_get.
combined = true

# The percentage of assoc_range() requests.
assocs_p = 40

############################### LONG CLIENT CONFIG #############################

# The percentage of invoke() based requests that are long running.
long_pct = 20

# The frequency at which the extension should yield to the database.
yield_f = 0

############################### BAD CLIENT CONFIG ##############################

# The number of bad requests to generate for every 10 million operations.
bad_ptm = 1
